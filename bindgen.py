import os
import re

is_rust_src = re.compile("(.*)\\.rs$")
re_type = re.compile(".*pub (struct|enum) ([a-zA-Z0-9]+).*")
re_impl = re.compile(".*impl ([a-zA-Z0-9]+).*")
re_func = re.compile(".*pub extern fn ([a-zA-Z0-9]+).*") # kinda janky

dirs = os.listdir("./src/")
types = []
funcs = []

lib_rs_eof_marker = "// PYTHON_SCRIPT_EOF_MARKER"

for dir in dirs:
    mtch =  is_rust_src.match(dir)
    if mtch is not None:
        f = open("./src/" + dir, "r")
        data = f.read()
        f.close()

        mod_name, = mtch.groups()
        print(f"Prcoessing {mod_name}")
        data = data.replace("(\n", "(").replace(",\n",",").replace(",)", ")").replace("    ", "")

        # Types
        for line in data.split("\n"):
            t_mtch = re_type.match(line)
            if t_mtch is not None:
                _, type_name, = t_mtch.groups()

                if type_name == "Standings":
                    continue # These are still a WIP

                print(f"Found type {type_name}")
                types.append(type_name)

        # Functions
        impl = "__ERR__NO__IMPL__"
        for line in data.split("\n"):
            i_mtch = re_impl.match(line)
            if i_mtch is not None:
                impl, = i_mtch.groups()
                print(f"Found interface for {impl}")
                continue

            f_mtch = re_func.match(line)
            if f_mtch is not None:
                func, = f_mtch.groups()
                func = func.replace("&mut self", f"self: &mut {impl}")
                func = func.replace("Self", impl)
                func = func.replace("&self", f"self: &{impl}")
                func = func.replace(", ", ",").replace(",)", ")").replace(",", ", ")

                print(f"Found function {func}")
                funcs.append(func)
                continue

out = """# AUTO GENERATED WITH ./bindgen.py AT BUILD TIME!
# DO NOT MODIFY BY HAND
language = "C++"
header = "/* AUTO GENERATED SQUIRE_CORE BINDINGS DO NOT MODIFY BY HAND. */"
trailer = "/* AUTO GENERATED SQUIRE_CORE BINDINGS DO NOT MODIFY BY HAND */"
pragma_once = true
autogen_warning = "/* Warning, this file is autogenerated by cbindgen. Don't modify this manually. */"
include_version = true
namespace = "squire_core"
no_includes = false
cpp_compat = true
braces = "NextLine"
documentation = true
documentation_style = "doxy"
\n"""
out += """[export]
prefix = "sc_"
\n"""
out += "include = ["
for i in types:
    out += f'"{i}",'

for f in funcs:
    out += f'"{f}",'

out = out[:-1]
out += "]\n"
out += """
[export.mangle]
rename_types = "CamelCase"
remove_underscores = false

[fn]
rename_args = "CamelCase"
sort_by = "Name"

[struct]
rename_fields = "CamelCase"
derive_constructor = true
derive_eq = true
derive_neq = true
derive_lt = true
derive_lte = true
derive_gt = true
derive_gte = true

[enum]
rename_variants = "CamelCase"
enum_class = true
derive_helper_methods = true
derive_const_casts = true
derive_mut_casts = true
derive_tagged_enum_destructor = true
derive_tagged_enum_copy_constructor = true
derive_tagged_enum_copy_assignment = true
private_default_tagged_enum_constructor = true

[const]
allow_static_const = true
sort_by = "Name"

[macro_expansion]
bitflags = true


[parse]
parse_deps = true
clean = true
"""

f = open("./cbindgen.toml", "w")
f.write(out)
f.close()

